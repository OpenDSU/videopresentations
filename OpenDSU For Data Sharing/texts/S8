Now that we've explained how DSU sharing works, it's important to note that for a successful system, DSUs need to be designed as granularly as possible, especially in terms of access control. Essentially, the issue resembles the normalization of data in a relational database, but now breaking a data model into entities requires analysis of the data sharing method. The basic rule is that if a set of fields or metadata will be shared together, then they should naturally be put in the same “unit” or the same DSU. Of course, it's also important whether the sharing is done in read-only or write mode. Generally, an insight from multiple enterprise use cases is that read-only sharing is sufficient in 99% of cases. The only more common scenario where write mode sharing of DSUs is absolutely necessary is to maintain the state of a business process. This state can be imagined as an automaton in which the current state of the process is kept shared and can be updated by different entities. If you have such cases, or if you want to implement a kind of smart contract shared between multiple entities in the network but still want to use DSUs' ability to keep data private, we recommend analyzing the OpenDSU concept of SVD (Self Validating Data) and maintaining such an SVD within the shared DSUs. In this way, it can be elegantly verified whether the process's evolution complied with the planned rules, while also allowing the write sharing of the “smart contract” off-chain.
