A system using Data Sharing Units (DSUs) needs to carefully consider the different types of DSUs it will use, essentially acting as data models. Each DSU type defines what kind of data it can store. It's also possible to include code within a DSU, although this is less common due to the security risks associated with mobile code. Nevertheless, there are effective applications for this, such as digital wallets storing encryption keys or in the use of DSUs for micro-ledgers, which are basically off-chain smart contracts. These contracts regulate who can update the DSU's state and in what manner, serving as off-chain smart contracts that are shared within a small group of an enterprise entities, or potentially with a wider public audience.
To summarize, Data Sharing Units (DSUs) are secured and identified through a Key S S I . They have the capacity to store keys that are essential for encryption and digital signatures. DSUs can handle various types of data, functioning as file systems or embedded databases, including key-value stores, indexed databases, or ledgers. They can also contain code that is crucial for validation and implementing business logic, a feature that is specific to each DSU type. These DSU types, also referred to as DSU constitutions, resemble classes in traditional programming, defining the structure and capabilities of each DSU instance. Additionally, DSU APIs serve as abstract interfaces, concealing the internal representations of data.
We should note that in most cases, DSUs are used for sharing data and are not generally viewed as abstract containers for code or as providers of APIs. However, as adoption increases, we believe new perspectives on the fundamental concept of DSUs, and additionally the idea of DSU Types, will emerge.

